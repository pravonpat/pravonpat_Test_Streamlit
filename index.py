import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.io as pio

st.set_page_config(page_title="üìä Data Explorer", layout="wide")

st.title("üìÅ Data Viewer + Custom Graph Generator")

uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠ Excel", type=["csv", "xlsx"])

if uploaded_file is not None:
    try:
        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠ Excel ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô header
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file, header=0)  # ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô header
        else:
            df = pd.read_excel(uploaded_file, header=0)  # ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô header

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏î‡∏±‡∏ä‡∏ô‡∏µ (index) ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1 ‡πÅ‡∏ó‡∏ô 0
        df.index = df.index + 1

        st.success("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
        st.caption(f"üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {df.shape[0]:,} ‡πÅ‡∏ñ‡∏ß | {df.shape[1]} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
        st.dataframe(df, use_container_width=True)

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
        with st.expander("üßÆ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå"):
            selected_columns = st.multiselect(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á", options=df.columns.tolist(), default=df.columns.tolist()
            )
            df_selected = df[selected_columns]
            st.dataframe(df_selected, use_container_width=True)

        # ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏•‡πá‡∏≠‡∏ï
        st.subheader("üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏•‡πá‡∏≠‡∏ï")
        transpose = st.checkbox("üîÑ ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå", value=False)
        df_numeric = df_selected.select_dtypes(include="number")

        if transpose:
            df_numeric = df_numeric.T
            df_numeric["column_id"] = df_numeric.index.astype(str)
            row_ids = df_numeric["column_id"].tolist()
        else:
            df_numeric["row_id"] = df_numeric.index.astype(str)
            row_ids = df_numeric["row_id"].tolist()

        selected_rows = st.multiselect("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü", options=row_ids, default=row_ids[:30])

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏Å‡∏£‡∏≤‡∏ü
        chart_type = st.selectbox("üìà ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏Å‡∏£‡∏≤‡∏ü", ["line", "bar", "area"])

        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏•‡πá‡∏≠‡∏ï
        if transpose:
            df_numeric = df_numeric[df_numeric["column_id"].isin(selected_rows)]
            df_melted = df_numeric.reset_index().melt(id_vars="column_id", var_name="row", value_name="value")
            x_col, y_col, group_col = "value", "row", "column_id"
            orientation = "h"
        else:
            df_numeric = df_numeric[df_numeric["row_id"].isin(selected_rows)]
            df_melted = df_numeric.melt(id_vars="row_id", var_name="column", value_name="value")
            x_col, y_col, group_col = "value", "column", "row_id"
            orientation = "h"

        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü
        if chart_type == "line":
            fig = px.line(df_melted, x=x_col, y=y_col, color=group_col, markers=True, orientation=orientation)
        elif chart_type == "bar":
            fig = px.bar(df_melted, x=x_col, y=y_col, color=group_col, orientation=orientation)
        else:
            fig = px.area(df_melted, x=x_col, y=y_col, color=group_col, orientation=orientation)

        fig.update_layout(height=600, title="üìä ‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", showlegend=True)
        st.plotly_chart(fig, use_container_width=True)

    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
else:
    st.info("‚è≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô")
